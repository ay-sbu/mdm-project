version: "0.0"

services:
  server-app:
    container_name: server-app
    build:
      context: ./server-app
    command: uvicorn config.asgi:application --host 0.0.0.0 --port 8000 --workers 4 --log-level debug --reload
    volumes:
      - ./server-app:/usr/src/app
      - $HOME/.cache/pip-docker/:/root/.cache/pip
    env_file:
      - ./env-vars/server-app.txt # you should create this file
    ports:
      - 8000:8000
    networks:
      - postgres

    # depends_on:
    #   - redis

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:management
    restart: always
    ports:
      - 5672:5672
      - 15672:15672

  redis:
    image: redis:7.0.11-alpine
    ports:
      - "6379:6379"

  flower:
    image: mher/flower
    restart: always
    ports:
      - 5555:5555
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672/

  # celery-worker:
  #   container_name: celery-worker
  #   build:
  #     context: ./server-app
  #   command: celery --app=config worker -l INFO -B
  #   volumes:
  #     - ./server-app:/usr/src/app
  #     - $HOME/.cache/pip-docker/:/root/.cache/pip
  #   env_file:
  #     - ./env-vars/server-app.txt # you should create this file
  #   networks:
  #     - postgres

  ########################################################################### postgres
  db:
    image: postgres
    container_name: postgres
    restart: always
    ports:
      - "5434:5432"
    environment:
      POSTGRES_USER: abbas
      POSTGRES_PASSWORD: 1
    volumes:
      - local_pgdata:/var/lib/postgresql/data
    networks:
      - postgres

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_USERNAME: abbas
      PGADMIN_DEFAULT_EMAIL: abbas@gmail.com
      PGADMIN_DEFAULT_PASSWORD: 1
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - postgres
  ########################################################################### end postgres

  ########################################################################### elk stack
  elasticsearch:
    image: elasticsearch:7.9.1
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - test_data:/usr/share/elasticsearch/data/
      - ./elk/elk-config/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    environment:
      - discovery.type=single-node
      - http.host=0.0.0.0
      - transport.host=0.0.0.0
      - xpack.security.enabled=false
      - xpack.monitoring.enabled=false
      - cluster.name=elasticsearch
      - bootstrap.memory_lock=true
    networks:
      - elk

  logstash:
    image: logstash:7.9.1
    container_name: logstash
    ports:
      - "5044:5044"
      - "9600:9600"
    volumes:
      - ./elk/elk-config/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./elk/elk-config/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ls_data:/usr/share/logstash/data

    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    image: kibana:7.9.1
    container_name: kibana
    ports:
      - "5601:5601"
    volumes:
      - ./elk/elk-config/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
      - kb_data:/usr/share/kibana/data
    networks:
      - elk
    depends_on:
      - elasticsearch
  ########################################################################### end of elk stack

networks:
  elk:
    driver: bridge
  postgres:
    driver: bridge

volumes:
  test_data:
  ls_data:
  kb_data:
  local_pgdata:
  pgadmin-data:
